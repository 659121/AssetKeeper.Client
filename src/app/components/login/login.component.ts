import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Router, ActivatedRoute } from '@angular/router';
import { AuthService } from '../../services/auth.service';
import { LoginRequest, RegisterRequest } from '../../models/auth.models';

@Component({
  selector: 'app-login',
  imports: [
    CommonModule,
    FormsModule
  ],
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css']
})
export class LoginComponent implements OnInit {
  isLoginMode = true;
  username = '';
  password = '';
  errorMessage = '';
  isLoading = false;
  returnUrl = '/dashboard';
  sessionExpired = false;

  constructor(private authService: AuthService, private router: Router, private route: ActivatedRoute) {}

  ngOnInit(): void {
    const url = new URL(window.location.href);
    let returnUrl = url.searchParams.get('returnUrl');
    const reason = url.searchParams.get('reason');
    
    // –ï—Å–ª–∏ returnUrl —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ login, –∏—Å–ø–æ–ª—å–∑—É–µ–º dashboard –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (returnUrl && returnUrl.includes('/login')) {
      returnUrl = '/dashboard';
    }
    
    this.returnUrl = returnUrl || '/dashboard';
    this.sessionExpired = reason === 'session_expired';
    
    //console.log('üîë Login component initialized:', { 
    //  returnUrl: this.returnUrl, 
    //  sessionExpired: this.sessionExpired 
    //});
    
    if (this.sessionExpired) {
      this.errorMessage = '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.';
    }
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –ª–æ–≥–∏–Ω–æ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
  toggleMode(): void {
    this.isLoginMode = !this.isLoginMode;
    this.errorMessage = '';
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
  onSubmit(): void {
    if (!this.username || !this.password) {
      this.errorMessage = '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è';
      return;
    }

    if (this.isLoginMode && this.password.length < 6) {
      this.errorMessage = '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤';
      return;
    }

    this.isLoading = true;
    this.errorMessage = '';

    if (this.isLoginMode) {
      this.login();
    } else {
      this.register();
    }
  }

  // –õ–æ–≥–∏–Ω
  private login(): void {
    const loginData: LoginRequest = {
      username: this.username,
      password: this.password
    };

    this.authService.login(loginData).subscribe({
      next: (response) => {
        if (this.authService.currentUserValue) {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º navigate –≤–º–µ—Å—Ç–æ navigateByUrl –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
          this.router.navigate([this.returnUrl]).then(success => {
            if (!success) {
              this.router.navigate(['/dashboard']);
            }
          });
        } else {
          this.errorMessage = '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
          console.error('No user data after login');
        }
        this.isLoading = false
      },
      error: (error) => {
        this.errorMessage = '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.';
        this.isLoading = false;
      }
    });
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
  private register(): void {
    const registerData: RegisterRequest = {
      username: this.username,
      password: this.password
    };

    this.authService.register(registerData).subscribe({
      next: () => {
        this.errorMessage = '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏.';
        this.isLoginMode = true;
        this.isLoading = false;
      },
      error: (error) => {
        this.errorMessage = '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.';
        this.isLoading = false;
      }
    });
  }
}