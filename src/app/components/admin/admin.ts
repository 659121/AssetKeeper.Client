import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { DataTableComponent } from '../shared/data-table/data-table';
import { ModalFormComponent } from '../shared/modal-form/modal-form';
import { UserService } from '../../services/user.service';
import { User, UpdateUserRequest } from '../../models/admin.models';
import { TableConfig, ModalConfig } from '../../models/base.models';

@Component({
  selector: 'app-admin',
  standalone: true,
  imports: [CommonModule, FormsModule, DataTableComponent, ModalFormComponent],
  templateUrl: './admin.html',
  styleUrls: ['./admin.css']
})
export class Admin implements OnInit {
  title = '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏';
  emptyMessage = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';
  
  data: User[] = [];
  loading = false;
  modalLoading = false;
  isModalOpen = false;
  selectedUser: User | null = null;
  isEditMode = false;

  // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π –≤ —Ñ–æ—Ä–º–µ
  formRoles: { [key: string]: boolean } = {};

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã
  tableConfig: TableConfig = {
    columns: [
      { key: 'id', title: 'ID', width: '80px' },
      { key: 'username', title: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', sortable: true },
      { 
        key: 'roles', 
        title: '–†–æ–ª–∏', 
        type: 'array',
        formatter: (roles: string[]) => this.formatRoles(roles)
      },
      { 
        key: 'isActive', 
        title: '–°—Ç–∞—Ç—É—Å', 
        type: 'boolean',
        formatter: (isActive: boolean) => isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
      },
      { 
        key: 'lastLogin', 
        title: '–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥', 
        type: 'date',
        formatter: (date: string) => date ? new Date(date).toLocaleDateString('ru-RU') : '–ù–∏–∫–æ–≥–¥–∞'
      }
    ],
    actions: [
      { name: 'edit', label: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', icon: '‚úèÔ∏è', color: '#007bff' },
      { 
        name: 'delete', 
        label: '–£–¥–∞–ª–∏—Ç—å', 
        icon: 'üóëÔ∏è', 
        color: '#dc3545',
        condition: (user: User) => user.id !== this.getCurrentUserId()
      }
    ]
  };

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è, —Ç–∞–∫ –∫–∞–∫ —Ä–æ–ª–∏ –±—É–¥–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ)
  modalConfig: ModalConfig = {
    title: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    size: 'md',
    fields: [
      { 
        key: 'username', 
        label: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 
        type: 'text', 
        required: true,
        disabled: true
      },
      { 
        key: 'isActive', 
        label: '–ê–∫—Ç–∏–≤–Ω—ã–π', 
        type: 'checkbox'
      }
      // –ü–æ–ª–µ roles —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, —Ç–∞–∫ –∫–∞–∫ –±—É–¥–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
    ]
  };

  availableRoles: string[] = [];

  constructor(private userService: UserService) {}

  ngOnInit(): void {
    this.loadUsers();
    this.loadAvailableRoles();
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  loadUsers(): void {
    this.loading = true;
    this.userService.getAll().subscribe({
      next: (users) => {
        this.data = users;
        this.loading = false;
      },
      error: (error) => {
        console.error('Error loading users:', error);
        this.loading = false;
      }
    });
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π —Å —Å–µ—Ä–≤–µ—Ä–∞
  loadAvailableRoles(): void {
    this.userService.getAvailableRoles().subscribe({
      next: (roles) => {
        this.availableRoles = roles;
      },
      error: (error) => {
        console.error('Error loading roles:', error);
        // Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–æ–ª–∏
        this.availableRoles = ['User', 'Admin'];
      }
    });
  }

  // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  onEdit(user: User): void {
    this.isEditMode = true;
    this.selectedUser = { ...user };
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ–∫–±–æ–∫—Å—ã —Ä–æ–ª–µ–π
    this.initializeRoleCheckboxes(user.roles);
    
    this.isModalOpen = true;
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–µ–∫–±–æ–∫—Å–æ–≤ —Ä–æ–ª–µ–π
  private initializeRoleCheckboxes(userRoles: string[]): void {
    this.formRoles = {};
    this.availableRoles.forEach(role => {
      this.formRoles[role] = userRoles.includes(role);
    });
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞ —Ä–æ–ª–∏
  toggleRole(role: string): void {
    this.formRoles[role] = !this.formRoles[role];
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ —Ä–æ–ª—å
  isRoleSelected(role: string): boolean {
    return this.formRoles[role] || false;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏
  getSelectedRoles(): string[] {
    return this.availableRoles.filter(role => this.formRoles[role]);
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  onDelete(user: User): void {
    if (user.id === this.getCurrentUserId()) {
      alert('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç!');
      return;
    }

    if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}?`)) {
      this.userService.delete(user.id).subscribe({
        next: () => this.loadUsers(),
        error: (error) => console.error('Error deleting user:', error)
      });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
  onTableAction(event: { action: string; item: User }): void {
    switch (event.action) {
      case 'edit':
        this.onEdit(event.item);
        break;
      case 'delete':
        this.onDelete(event.item);
        break;
    }
  }

  // –ö–ª–∏–∫ –ø–æ —Å—Ç—Ä–æ–∫–µ —Ç–∞–±–ª–∏—Ü—ã
  onRowClick(user: User): void {
    this.onEdit(user);
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  onModalSave(formData: any): void {
    if (!this.selectedUser) return;

    const selectedRoles = this.getSelectedRoles();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ä–æ–ª—å
    if (selectedRoles.length === 0) {
      alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }

    const saveData: UpdateUserRequest = {
      isActive: formData.isActive,
      roles: selectedRoles
    };

    this.modalLoading = true;

    this.userService.update(this.selectedUser.id, saveData).subscribe({
      next: () => {
        this.loadUsers();
        this.onModalCancel();
        this.modalLoading = false;
      },
      error: (error) => {
        console.error('Error saving user:', error);
        this.modalLoading = false;
      }
    });
  }

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  onModalCancel(): void {
    this.isModalOpen = false;
    this.selectedUser = null;
    this.isEditMode = false;
    this.formRoles = {};
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  private formatRoles(roles: string[]): string {
    return roles.map(role => this.getRoleDisplayName(role)).join(', ');
  }

  // –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Ä–æ–ª–∏
  getRoleDisplayName(role: string): string {
    const roleNames: { [key: string]: string } = {
      'User': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      'Admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
    };
    return roleNames[role] || role;
  }

  // –ü–æ–ª—É—á–∏—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  private getCurrentUserId(): number {
    const currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');
    return currentUser.id || 0;
  }
}